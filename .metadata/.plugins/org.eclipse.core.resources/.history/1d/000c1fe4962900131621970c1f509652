import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

/**
 * @author Alexej
 *
 */
public class Alphabet {
	private Map<Integer, String> alphabet = new TreeMap<Integer, String>();

	public Alphabet() {
		int x=0;
		for (int i = (int) 'À'; i <= (int) 'ß'+x; i++) {
			if((char)i=='É'){
				System.out.println("ERROR");
			}
			char V = (char) i;
			String a = V + "";
			this.alphabet.put(i - (int) 'À' + 1, a);
			if((char)i=='E'){
				i++;
				x++;

				System.out.println("i="+i);
				System.out.println("x="+x);
				this.alphabet.put(i - (int) 'À' + 1, a);
			}
		}
	}

	public Map<Integer, String> getAlphabet() {
		return this.alphabet;
	}

	public Integer getByAlphabet(String value) {
		for (Entry<Integer, String> obj : this.alphabet.entrySet()) {
			if (obj.getValue().equalsIgnoreCase(value)) {
				return obj.getKey();
			}
		}
		return -1;
	}

	public String getByAlphabet(Integer key) {
		for (Entry<Integer, String> obj : this.alphabet.entrySet()) {
			if (obj.getKey().equals(key)) {
				return obj.getValue();
			}
//			System.out.println(obj.getKey());
//			System.out.println(key);
		}
		return null;
	}

	public String toString() {
		return this.alphabet.toString();
	}
	/**
	 * @param value
	 * @return
	 */
	public Integer mod(int value){
		int c=value%alphabet.size();
//		System.out.println("alphabet.size()="+alphabet.size());
//		System.out.println("mod value"+value);
//		System.out.println("mod return"+c);
		if(c!=0){
			return c;
		}else{
			return value;
		}
	}
}
